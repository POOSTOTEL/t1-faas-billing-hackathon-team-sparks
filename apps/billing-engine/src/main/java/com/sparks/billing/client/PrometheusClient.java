package com.sparks.billing.client;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Set;

@Slf4j
@Component
public class PrometheusClient {

    @Value("${prometheus.url:http://prometheus-operated.observability.svc:9090}")
    private String prometheusUrl;

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
     */
    public Set<String> getServices(String namespace) {
        log.info("üöÄ START getServices for namespace: {}", namespace);

        try {
            // –ü–†–û–°–¢–û–ô –∑–∞–ø—Ä–æ—Å –∫–æ—Ç–æ—Ä—ã–π —Ç–æ—á–Ω–æ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
            String query = "up";
            log.info("üìä Trying basic query: {}", query);

            String response = executeSimplePromQuery(query);
            log.info("‚úÖ Got response from Prometheus, length: {}", response.length());

            // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –Ω–∞—á–∞–ª–∞
            Set<String> services = Set.of("test-app-1", "test-app-2", "test-app-3");
            log.info("üéØ Returning test services: {}", services);
            return services;

        } catch (Exception e) {
            log.error("üí• CRITICAL ERROR in getServices: {}", e.getMessage(), e);
            log.info("üîÑ Using fallback services");
            return Set.of("fallback-service-1", "fallback-service-2");
        } finally {
            log.info("üèÅ END getServices");
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Prometheus - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
     */
    public double query(String promQL) {
        log.info("üîç START query: {}", promQL);

        try {
            String response = executeSimplePromQuery(promQL);
            log.info("üìÑ Response received, length: {}", response.length());

            // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥
            double value = parseSimpleValue(response);
            log.info("üìà Parsed value: {}", value);

            return value;

        } catch (Exception e) {
            log.error("‚ùå Query failed: {}", e.getMessage());
            log.info("üîÑ Returning default value 0.0");
            return 0.0;
        } finally {
            log.info("üèÅ END query");
        }
    }

    /**
     * –ü–†–û–°–¢–û–ô HTTP –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ HttpURLConnection
     */
    private String executeSimplePromQuery(String query) throws Exception {
        log.info("üåê START executeSimplePromQuery: {}", query);

        String encodedQuery = URLEncoder.encode(query, StandardCharsets.UTF_8);
        String urlString = prometheusUrl + "/api/v1/query?query=" + encodedQuery;

        log.info("üîó URL: {}", urlString);

        URL url = new URL(urlString);
        HttpURLConnection connection = null;

        try {
            connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            connection.setConnectTimeout(10000); // 10 seconds
            connection.setReadTimeout(10000);    // 10 seconds

            log.info("üì° Connecting to Prometheus...");
            int responseCode = connection.getResponseCode();
            log.info("üìã Response Code: {}", responseCode);

            if (responseCode == 200) {
                BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String inputLine;
                StringBuilder response = new StringBuilder();

                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
                in.close();

                String result = response.toString();
                log.info("‚úÖ SUCCESS - Response length: {}", result.length());
                return result;
            } else {
                // –ß–∏—Ç–∞–µ–º error stream
                BufferedReader errorReader = new BufferedReader(new InputStreamReader(connection.getErrorStream()));
                String errorLine;
                StringBuilder errorResponse = new StringBuilder();

                while ((errorLine = errorReader.readLine()) != null) {
                    errorResponse.append(errorLine);
                }
                errorReader.close();

                log.error("üö® HTTP ERROR {}: {}", responseCode, errorResponse.toString());
                throw new RuntimeException("HTTP " + responseCode + ": " + errorResponse.toString());
            }

        } catch (Exception e) {
            log.error("üí• CONNECTION ERROR: {}", e.getMessage());
            throw e;
        } finally {
            if (connection != null) {
                connection.disconnect();
                log.info("üîå Connection disconnected");
            }
        }
    }

    /**
     * –ü–†–û–°–¢–û–ô –ø–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
     */
    private double parseSimpleValue(String response) {
        log.info("üîß START parseSimpleValue, response length: {}", response.length());

        try {
            // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –∑–Ω–∞—á–µ–Ω–∏—è –≤ JSON
            // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: "value":["timestamp","number"]
            int valueIndex = response.indexOf("\"value\"");
            if (valueIndex == -1) {
                log.warn("‚ö†Ô∏è No 'value' field found in response");
                return 0.0;
            }

            int bracketStart = response.indexOf("[", valueIndex);
            int bracketEnd = response.indexOf("]", bracketStart);

            if (bracketStart == -1 || bracketEnd == -1) {
                log.warn("‚ö†Ô∏è No array found in value field");
                return 0.0;
            }

            String arrayContent = response.substring(bracketStart + 1, bracketEnd);
            log.info("üì¶ Array content: {}", arrayContent);

            // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å [timestamp, value]
            String[] parts = arrayContent.split(",");
            if (parts.length < 2) {
                log.warn("‚ö†Ô∏è Not enough parts in array");
                return 0.0;
            }

            // –ë–µ—Ä–µ–º –≤—Ç–æ—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (—á–∏—Å–ª–æ), —É–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏
            String valueStr = parts[1].replace("\"", "").trim();
            log.info("üî¢ Value string: '{}'", valueStr);

            double value = Double.parseDouble(valueStr);
            log.info("‚úÖ Successfully parsed value: {}", value);
            return value;

        } catch (Exception e) {
            log.error("‚ùå Parse error: {}", e.getMessage());
            return 0.0;
        } finally {
            log.info("üèÅ END parseSimpleValue");
        }
    }

    /**
     * –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    public String testConnection() {
        log.info("üß™ START testConnection");

        try {
            String response = executeSimplePromQuery("up");
            log.info("‚úÖ Connection test SUCCESS");
            return "SUCCESS: Connected to Prometheus";

        } catch (Exception e) {
            log.error("‚ùå Connection test FAILED: {}", e.getMessage());
            return "FAILED: " + e.getMessage();
        } finally {
            log.info("üèÅ END testConnection");
        }
    }
}